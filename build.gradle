

// add Ceylon module to Gradle classpath
buildscript {    
    dependencies {
       project.ext.moduleName = 'script'
       project.ext.moduleVersion = '1.0.0'
       def module = "$project.moduleName/$project.moduleVersion"
       def subDir = file('ceylon')
       def sep = System.properties['path.separator']
       def batOrSh = ( sep == ';' ? 'bat' : 'sh' )
       def classpathString = "ceylon.$batOrSh classpath $module".execute(null,subDir).text
       //println(classpathString)
       //def classpathString = "ceylon.$batOrSh classpath ceylon.language/1.1.1".execute(null,subDir).text
       // init Gradle classpath
       classpath files(classpathString.split(sep))
       //System.properties['java.class.path'] += "$sep$classpathString"
    }
}



import com.redhat.ceylon.compiler.java.runtime.tools.*
import org.ceylongradle.ProjectHolder

ProjectHolder.gProject = project

CompilerOptions compilerOptions = new CompilerOptions();
compilerOptions.addSourcePath(file('ceylon/source'))
compilerOptions.addModule("script");
compilerOptions.addModule("org.ceylongradle");
compilerOptions.setOutputRepository("${file('ceylon/modules')}");

CompilationListener listener = new CompilationListener(){
    @Override
    public void error(File file, long line, long column, String message){
        throw new Exception(message)
    }
    @Override
    public void warning(File file, long line, long column, String message){
         println message
    }
    @Override
    public void moduleCompiled(String module, String version){
         println(module)
    }
};

Compiler jvmCompiler = CeylonToolProvider.getCompiler(Backend.Java);
jvmCompiler.compile(compilerOptions, listener);


 JavaRunnerOptions options = new  JavaRunnerOptions();
//options.setDelegateClassLoader(project.getBuildscript().getClassLoader())
options.addUserRepository("${file('ceylon/modules')}");
String module = "script";
String version = "1.0.0";

Runner jvmRunner = CeylonToolProvider.getRunner(Backend.Java, options, module, version);
try{
    jvmRunner.run();
}finally{
    // make sure we release the classloader
    jvmRunner.cleanup();
}

